{"version":3,"sources":["components/profile.js","components/appbar.js","App.js","serviceWorker.js","index.js","assets/pao.jpg"],"names":["styles","paper","width","height","alignItems","justifyContent","display","Profile","react_default","a","createElement","index_es","container","spacing","justify","item","style","src","pic","alt","Component","NavigationBar","alignContent","React","App","xs","appbar","profile","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uUAIMA,EAAS,CACbC,MAAO,CACLC,MAAM,IACNC,OAAQ,IACRC,WAAY,SACZC,eAAgB,SAChBC,QAAS,SAuBEC,mLAjBX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAIC,QAAQ,UACnCN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,MAAI,GACRP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOK,MAAOhB,EAAOC,OACnBO,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAKC,IAAI,eAAehB,OAAQ,QAG9CK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,MAAI,GACRP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOK,MAAShB,EAAOC,OAAvB,kBAVYmB,aCDPC,mLARP,OACAb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQK,MAAO,CAACV,QAAQ,OAAQgB,aAAa,SAAUjB,eAAe,WAAtE,oBAHoBkB,IAAMH,WCuBnBI,mLAfX,OACEhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAIG,MAAO,CAACb,OAAO,OAAQD,MAAM,SACtDM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,IACvBL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,MAAI,EAACU,GAAI,IACbjB,EAAAC,EAAAC,cAACgB,EAAD,OAEFlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,MAAI,EAACU,GAAI,IACbjB,EAAAC,EAAAC,cAAEiB,EAAF,gBATIP,aCGEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.7d5b8b1d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport pic from '../assets/pao.jpg' \r\nimport { Paper, Grid } from '@material-ui/core';\r\n\r\nconst styles = {\r\n  paper: {\r\n    width:250,\r\n    height: 250,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    display: 'flex'\r\n  }\r\n}\r\n\r\nclass Profile extends Component {\r\n  render() {\r\n    return (\r\n      <Grid container spacing={16} justify='center'>\r\n        <Grid item>\r\n          <Paper style={styles.paper}>\r\n            <img src={pic} alt='pic ko baket' height={150}/>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item>\r\n          <Paper style = {styles.paper}>\r\n            owpao\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import { AppBar, Grid } from \"@material-ui/core\";\r\nimport React from 'react';\r\n\r\nclass NavigationBar extends React.Component {\r\n    render() {\r\n        return(\r\n        <AppBar style={{display:'flex', alignContent:'center', justifyContent:'center'}}>\r\n            Hello App\r\n        </AppBar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavigationBar","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport './materialize/css/materialize.css'\r\nimport Profile from './components/profile';\r\nimport { Grid } from '@material-ui/core';\r\nimport NavigationBar from './components/appbar';\r\n// import { grey } from '@material-ui/core/colors';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Grid container spacing={16} style={{height:'100%', width:'100%'}}>\r\n          <Grid container spacing={16}>\r\n            <Grid item xs={12}>\r\n              <NavigationBar/>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              < Profile/>\r\n            </Grid>\r\n          </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/pao.6dc015cc.jpg\";"],"sourceRoot":""}