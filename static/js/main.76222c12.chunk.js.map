{"version":3,"sources":["components/profile.js","App.js","serviceWorker.js","index.js","assets/pao.jpg"],"names":["styles","paper","width","height","alignItems","justifyContent","display","Profile","react_default","a","createElement","index_es","container","spacing","justify","paddingTop","item","style","src","pic","Component","App","alignContent","xs","profile","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uUAIMA,EAAS,CACbC,MAAO,CACLC,MAAM,IACNC,OAAQ,IACRC,WAAY,SACZC,eAAgB,SAChBC,QAAS,SAuBEC,mLAjBX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAIC,QAAQ,SAASd,OAAQ,CAACe,WAAW,MAChEP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,MAAI,GACRR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOM,MAAOjB,EAAOC,OACnBO,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,IAAKhB,OAAQ,QAG3BK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,MAAI,GACRR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOM,MAASjB,EAAOC,OAAvB,kBAVYmB,aCWPC,mLAfX,OACEb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAII,MAAO,CAACd,OAAO,SAC1CK,EAAAC,EAAAC,cAAEC,EAAA,EAAF,CAAOK,MAAI,EAACC,MAAO,CAACX,QAAQ,OAAQgB,aAAa,SAAUjB,eAAe,YAGxEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,IACvBL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,MAAI,EAACO,GAAI,IACbf,EAAAC,EAAAC,cAAEc,EAAF,gBATIJ,aCIEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.76222c12.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport pic from '../assets/pao.jpg' \r\nimport { Paper, Grid } from '@material-ui/core';\r\n\r\nconst styles = {\r\n  paper: {\r\n    width:250,\r\n    height: 250,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    display: 'flex'\r\n  }\r\n}\r\n\r\nclass Profile extends Component {\r\n  render() {\r\n    return (\r\n      <Grid container spacing={16} justify='center' styles={{paddingTop:200}}>\r\n        <Grid item>\r\n          <Paper style={styles.paper}>\r\n            <img src={pic} height={150}/>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item>\r\n          <Paper style = {styles.paper}>\r\n            owpao\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './materialize/css/materialize.css'\nimport Profile from './components/profile';\nimport { AppBar, Grid } from '@material-ui/core';\n// import { grey } from '@material-ui/core/colors';\n\nclass App extends Component {\n  render() {\n    return (\n      <Grid container spacing={16} style={{height:'100%'}}>\n        < Grid item style={{display:'flex', alignContent:'center', justifyContent:'center'}}>\n            {/* <AppBar color=\"default\" style={{alignItems:'center'}}>Test</AppBar>  */}\n          </Grid>\n          <Grid container spacing={16}>\n            <Grid item xs={12}>\n              < Profile/>\n            </Grid>\n          </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/pao.6dc015cc.jpg\";"],"sourceRoot":""}